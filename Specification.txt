Среда разработки:
1) Windows 10 (IIS 10, соответственно)
2) Visual Studio 2015

Deploy - стандартными средствами Visual Studion

Настройки IIS:
1) IIS Должен поддерживать Windows authentication
2) Application Pool должен быть в Classic managed pipline mode для поддержки impersonation
3) Windows authentication должна быть включена на родительском уровне web-приложения.
4) .Net framework 4.6
5) ASP.NET 4.6

Настройки приложения Web.config:
1) параметра "rootFolder" - корневая папка доступа.

Ограничения и проблемы:
1) Некоторые расширения файлов фильтруются на уровне IIS. Для их поддрежки можно убрать эти расширения из настроек Request Filtering, либо добавлять '/' в конце запроса
2) Поскольку приложение использует windows authentication вручную отправлять запросы (напр. с Fiddler) затруднительно. Плагин для Chrome "Postman" с этой задачей справляется, т.к. сам отправляет токен авторизации
Также, следует обратить внимание, что логиниться необходимо под серверным аккаунтом.
(По идее можно выключить windows authentication и impersonation при этом задать корневую папку в wwwroot, но этот кейс не проверялся)
3) В коде достаточно сумбурно обрабатываются исключения (частично помечено тудушками).
4) Возникают проблемы при обращении к большим файлам, превышающим размер оперативной ~ в 0.5раза (т.к. помимо файла в памяти ещё и его строковое представление) - хотя с другой стороны в реальном проекте передавать файлы в JSON строкой - не самая лучшая идея
5) Не проверена в полной мере работа при конкурентных запросах, хотя механизм, обрабатывающий это добавлен (ExclusiveActionAttribute)
6) Возможны некоторые ошибки при некорректных запросах, но для этого нужно больше времени на тестирование.

Примечание:
Home и API - шаблонный код, оставил для удобства.

Доп. задания:
Put и Post: URL - путь до дирректории где лежит/будет лежать файл.
(Напр. http://localhost/FileSystemAccess/api/FileSystem/Files)

Body:

{
  "name": "test.txt",
 "content": "YXNkZg=="
}

(Параметра "name" - обязателен)



